/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <unistd.h>
#include <string>

#include <android-base/file.h>
#include <android-base/test_utils.h>
#include <gtest/gtest.h>

#include "JavaGen.h"

namespace {

constexpr const char* kTestSyspropFile =
    R"(owner: Vendor
module: "com.somecompany.TestProperties"
prefix: "com.somecompany"

prop {
    name: "test_double"
    type: Double
    scope: Internal
}
prop {
    name: "test_int"
    type: Integer
    scope: Public
}
prop {
    name: "test.string"
    type: String
    scope: System
    readonly: true
}

prop {
    name: "test.enum"
    type: Enum
    enum_values: "a|b|c|D|e|f|G"
    scope: Internal
    readonly: false
}
prop {
    name: "test_BOOLeaN"
    type: Boolean
    scope: Public
}
prop {
    name: "longlonglongLONGLONGlongLONGlongLONG"
    type: Long
    scope: System
}

prop {
    name: "test_double_list"
    type: DoubleList
    scope: Internal
}
prop {
    name: "test_list_int"
    type: IntegerList
    scope: Public
}
prop {
    name: "test.strlist"
    type: StringList
    scope: System
    readonly: false
}

prop {
    name: "el"
    type: EnumList
    enum_values: "enu|mva|lue"
    scope: Internal
}
)";

constexpr const char* kExpectedJavaOutput =
    R"(// Generated by the sysprop generator. DO NOT EDIT!

package com.somecompany;

import android.annotation.SystemApi;

import android.os.SystemProperties;
import java.util.ArrayList;
import java.util.function.Function;
import java.util.List;
import java.util.Optional;
import java.util.StringJoiner;

public final class TestProperties {
    private TestProperties () {}

    private static Boolean tryParseBoolean(String str) {
        switch (str.toLowerCase()) {
            case "1":
            case "true":
                return Boolean.TRUE;
            case "0":
            case "false":
                return Boolean.FALSE;
            default:
                return null;
        }
    }

    private static Integer tryParseInteger(String str) {
        try {
            return Integer.valueOf(str);
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private static Long tryParseLong(String str) {
        try {
            return Long.valueOf(str);
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private static Double tryParseDouble(String str) {
        try {
            return Double.valueOf(str);
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private static String tryParseString(String str) {
        return str;
    }

    private static <T extends Enum<T>> T tryParseEnum(Class<T> enumType, String str) {
        try {
            return Enum.valueOf(enumType, str);
        } catch (IllegalArgumentException e) {
            return null;
        }
    }

    private static <T> List<T> tryParseList(Function<String, T> elementParser, String str) {
        List<T> ret = new ArrayList<>();

        for (String element : str.split(",")) {
            T parsed = elementParser.apply(element);
            if (parsed == null) {
                return null;
            }
            ret.add(parsed);
        }

        return ret;
    }

    private static <T extends Enum<T>> List<T> tryParseEnumList(Class<T> enumType, String str) {
        List<T> ret = new ArrayList<>();

        for (String element : str.split(",")) {
            T parsed = tryParseEnum(enumType, element);
            if (parsed == null) {
                return null;
            }
            ret.add(parsed);
        }

        return ret;
    }

    private static <T> String formatList(List<T> list) {
        StringJoiner joiner = new StringJoiner(",");

        for (T element : list) {
            joiner.add(element.toString());
        }

        return joiner.toString();
    }

    /** @hide */
    public static Optional<Double> test_double() {
        String value = SystemProperties.get("ro.com.somecompany.test_double");
        return Optional.ofNullable(tryParseDouble(value));
    }

    public static Optional<Integer> test_int() {
        String value = SystemProperties.get("ro.com.somecompany.test_int");
        return Optional.ofNullable(tryParseInteger(value));
    }

    @SystemApi
    public static Optional<String> test_string() {
        String value = SystemProperties.get("ro.com.somecompany.test.string");
        return Optional.ofNullable(tryParseString(value));
    }

    /** @hide */
    public static enum test_enum_values {
        a,
        b,
        c,
        D,
        e,
        f,
        G,
    }

    /** @hide */
    public static Optional<test_enum_values> test_enum() {
        String value = SystemProperties.get("com.somecompany.test.enum");
        return Optional.ofNullable(tryParseEnum(test_enum_values.class, value));
    }

    /** @hide */
    public static void test_enum(test_enum_values value) {
        SystemProperties.set("com.somecompany.test.enum", value.toString());
    }


    public static Optional<Boolean> test_BOOLeaN() {
        String value = SystemProperties.get("ro.com.somecompany.test_BOOLeaN");
        return Optional.ofNullable(tryParseBoolean(value));
    }

    @SystemApi
    public static Optional<Long> longlonglongLONGLONGlongLONGlongLONG() {
        String value = SystemProperties.get("ro.com.somecompany.longlonglongLONGLONGlongLONGlongLONG");
        return Optional.ofNullable(tryParseLong(value));
    }

    /** @hide */
    public static Optional<List<Double>> test_double_list() {
        String value = SystemProperties.get("ro.com.somecompany.test_double_list");
        return Optional.ofNullable(tryParseList(v -> tryParseDouble(v), value));
    }

    public static Optional<List<Integer>> test_list_int() {
        String value = SystemProperties.get("ro.com.somecompany.test_list_int");
        return Optional.ofNullable(tryParseList(v -> tryParseInteger(v), value));
    }

    @SystemApi
    public static Optional<List<String>> test_strlist() {
        String value = SystemProperties.get("com.somecompany.test.strlist");
        return Optional.ofNullable(tryParseList(v -> tryParseString(v), value));
    }

    @SystemApi
    public static void test_strlist(List<String> value) {
        SystemProperties.set("com.somecompany.test.strlist", formatList(value));
    }


    /** @hide */
    public static enum el_values {
        enu,
        mva,
        lue,
    }

    /** @hide */
    public static Optional<List<el_values>> el() {
        String value = SystemProperties.get("ro.com.somecompany.el");
        return Optional.ofNullable(tryParseEnumList(el_values.class, value));
    }
}
)";

}  // namespace

using namespace std::string_literals;

TEST(SyspropTest, JavaGenTest) {
  TemporaryFile temp_file;

  // strlen is optimized for constants, so don't worry about it.
  ASSERT_EQ(write(temp_file.fd, kTestSyspropFile, strlen(kTestSyspropFile)),
            strlen(kTestSyspropFile));
  close(temp_file.fd);
  temp_file.fd = -1;

  TemporaryDir temp_dir;

  std::string err;
  ASSERT_TRUE(GenerateJavaLibrary(temp_file.path, temp_dir.path, &err));
  ASSERT_TRUE(err.empty());

  std::string java_output_path =
      temp_dir.path + "/com/somecompany/TestProperties.java"s;
  std::string jni_output_path = temp_dir.path + "/TestProperties_jni.cpp"s;

  std::string java_output;
  ASSERT_TRUE(
      android::base::ReadFileToString(java_output_path, &java_output, true));
  ASSERT_EQ(java_output, kExpectedJavaOutput);

  unlink(java_output_path.c_str());
  rmdir((temp_dir.path + "/com/somecompany"s).c_str());
  rmdir((temp_dir.path + "/com"s).c_str());
}
